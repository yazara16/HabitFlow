// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String?
  photoUrl  String?
  createdAt DateTime @default(now())

  // Relations
  habits           Habit[]
  notifications    Notification[]
  habitLogs        HabitLog[]
  habitOverrides   HabitOverride[]
  userSettings     UserSettings?
  userAchievements UserAchievement[]
  reminders        Reminder[]
  devices          Device[]
  weeklyReports    WeeklyReport[]
  goals            Goal[]
  progressEntries  ProgressEntry[]
  streakRecords    StreakRecord[]
  categories       Category[]
  themes           Theme[]

  @@map("users")
}

model Habit {
  id              Int    @id @default(autoincrement())
  userId          Int
  name            String
  description     String?
  categoryLabel   String?
  color           String?
  icon            String?
  target          Int?
  completed       Int       @default(0)
  streak          Int       @default(0)
  frequency       String?
  monthlyDays     String?
  monthlyMonths   String?
  reminderTime    String?
  reminderEnabled Boolean   @default(false)
  createdAt       DateTime  @default(now())
  lastCompleted   DateTime?

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitLogs       HabitLog[]
  habitOverrides  HabitOverride[]
  reminders       Reminder[]
  progressEntries ProgressEntry[]
  streakRecords   StreakRecord[]

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("habits")
}

model Notification {
  id        Int   @id @default(autoincrement())
  userId    Int
  type      String?
  title     String?
  message   String?
  time      String?
  read      Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model HabitLog {
  id               Int   @id @default(autoincrement())
  habitId          Int
  userId           Int
  date             DateTime
  completedAmount  Int      @default(0)
  completedBoolean Boolean  @default(false)
  note             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("habit_logs")
}

model HabitOverride {
  id        Int   @id @default(autoincrement())
  habitId   Int
  userId    Int
  date      DateTime
  hidden    Boolean  @default(false)
  patch     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("habit_overrides")
}

model UserSettings {
  userId    Int   @id
  settings  String?
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Achievement {
  id          Int   @id @default(autoincrement())
  key         String   @unique
  title       String?
  description String?
  criteria    String?
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            Int   @id @default(autoincrement())
  userId        Int
  achievementId Int
  earnedAt      DateTime @default(now())
  meta          String?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@map("user_achievements")
}

model Reminder {
  id         Int    @id @default(autoincrement())
  userId     Int
  habitId    Int?
  timeOfDay  String?
  enabled    Boolean   @default(true)
  timezone   String?
  recurrence String?
  days       String?
  nextRun    DateTime?
  createdAt  DateTime  @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit? @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Device {
  id         Int    @id @default(autoincrement())
  userId     Int
  platform   String?
  pushToken  String?
  lastSeenAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model WeeklyReport {
  id              Int   @id @default(autoincrement())
  userId          Int
  weekStart       DateTime
  weekEnd         DateTime
  habitsCompleted Int      @default(0)
  totalHabits     Int      @default(0)
  weeklyStreak    Int      @default(0)
  goals           Json?
  achievements    Json?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weekly_reports")
}

model Goal {
  id           Int    @id @default(autoincrement())
  userId       Int
  title        String
  description  String?
  category     String?
  targetValue  Int
  currentValue Int       @default(0)
  deadline     DateTime?
  status       String    @default("active")
  priority     String    @default("medium")
  color        String?
  icon         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  progressEntries ProgressEntry[]

  @@map("goals")
}

model ProgressEntry {
  id          Int   @id @default(autoincrement())
  userId      Int
  habitId     Int?
  goalId      Int?
  entryType   String
  value       Int      @default(0)
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit? @relation(fields: [habitId], references: [id], onDelete: Cascade)
  goal  Goal?  @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("progress_entries")
}

model StreakRecord {
  id            Int   @id @default(autoincrement())
  userId        Int
  habitId       Int?
  streakType    String
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActivity  DateTime
  streakStarted DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit? @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("streak_records")
}

model Category {
  id          Int   @id @default(autoincrement())
  userId      Int
  name        String
  description String?
  color       String
  icon        String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  habits Habit[]

  @@map("categories")
}

model Theme {
  id             Int   @id @default(autoincrement())
  userId         Int
  themeName      String   @default("system")
  primaryColor   String   @default("#3b82f6")
  secondaryColor String   @default("#64748b")
  accentColor    String   @default("#f59e0b")
  isDarkMode     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("themes")
}
